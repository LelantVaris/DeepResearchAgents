import { openai } from '@ai-sdk/openai'
import { generateObject, Output } from 'ai'
import { z } from 'zod'
import 'dotenv/config'
import Exa from 'exa-js'
import { generateText, tool } from 'ai'
import fs from 'fs'
import { perplexity } from '@ai-sdk/perplexity'
// Initialize the Exa client
export const exa = new Exa(process.env.EXA_API_KEY);
// --- Function Definitions ---

const fetchCompetitorsPerplexity = async (company: string, n: number = 2) => {
  console.log(`Getting competitors for ${company} using Perplexity`);

  const { text: competitorsRaw, sources } = await generateText({
    model: perplexity("sonar-pro"),
    system: "You are an expert analyst and researcher.",
    prompt: `Please identify similar competitors (max ${n}) to the following company: ${company}.
For each competitor, provide a brief description of their product, a link to their website, and an explanation of why they are similar.`,
  });
  return { competitorsRaw, sources };
};

const fetchCompetitorsFromWeb = async (company: string, n: number = 2) => {
  console.log(`Getting competitors info for ${company} from web sources`);
  const {
    experimental_output: { competitors },
  } = await generateText({
    model: openai("gpt-4o"),
    prompt: `For the following company provide:
        - find similar competitors (max ${n}) to the following company: ${company}.
        - for each competitor, provide a brief description of their product, a link to their website, and an explanation of why they are similar.

        <company>${company}</company>`,
    tools: {
      searchWeb: tool({
        description: "Search the web for information about a company",
        parameters: z.object({
          query: z.string().min(1).max(100).describe("The search query"),
        }),
        execute: async ({ query }) => {
          // Using the initialized 'exa' client
          // The exa.searchAndContents method might differ slightly based on the SDK version.
          // This is a common pattern:
          const searchResponse = await exa.searchAndContents(query, {
            // livecrawl: "always", // 'livecrawl' might be 'useAutoprompt' or another option
            numResults: 5,
            highlights: true, // Example option, check Exa SDK docs
            text: true, // To get text content
          });
          // Adapt based on the actual structure of Exa's response
          // Assuming results are in searchResponse.results or similar
          return { results: searchResponse.results || [] };
        },
      }),
    },
    maxSteps: 4,
    experimental_output: Output.object({
      schema: z.object({
        competitors: z.array(
          z.object({
            name: z.string(),
            description: z.string(),
            website: z.string().url(),
            similarity: z.string(),
            sources: z.array(z.string()),
          }),
        ),
      }),
    }),
  });
  console.log(`Successfully fetched company info for ${company} from web`);
  return competitors;
};

export const getCompetitors = async (company: string, n: number = 2) => {
  console.log(`Getting competitors for ${company} (main function)`);

  const results = await Promise.all([
    fetchCompetitorsPerplexity(company, n),
    fetchCompetitorsFromWeb(company, n),
  ]);

  const { object: competitors } = await generateObject({
    model: openai("gpt-4o-mini"),
    prompt:
      "Extract the competitors from the following text:\n\nRaw competitors:\n" +
      JSON.stringify(results),
    output: "array", // This might need to be more specific or handled by the schema directly in some SDKs
    schema: z.array( // Ensure the root schema is an array if 'output: "array"' isn't directly supported for the root
        z.object({
            name: z.string(),
            description: z.string(),
            website: z.string().url(),
            similarity: z.string(),
            sources: z.array(z.string()),
        })
    ),
  });

  console.log(
    `Competitors retrieved: ${competitors.map((competitor: any) => competitor.name).join(", ")}`,
  );

  return competitors;
};

// --- Example Usage (Optional - for testing directly) ---
// You would typically call getCompetitors from another part of your application.

async function main() {
  const companyName = "Stripe"; // Example company, change as needed
  // const companyName = "Netflix"; // Another example
  // const companyName = "YourCompanyNameHere"; // Test with a company you're interested in

  try {
    console.log(`Attempting to find competitors for ${companyName}...`);
    // You can also change the number of competitors to fetch (default is 2)
    const competitors = await getCompetitors(companyName, 3); // Fetching up to 3 competitors

    console.log("\n--- Final Competitor List ---");
    if (competitors && competitors.length > 0) {
      console.log(JSON.stringify(competitors, null, 2));
    } else {
      console.log("No competitors found or an issue occurred.");
    }
  } catch (error) {
    console.error("\n--- Error fetching competitors ---");
    // Log the full error for more details, especially during development
    console.error(error);
  }
}

// If you want to run this file directly using `ts-node index.ts` or similar:
if (require.main === module) {
  main(); // This line actually calls the main function
}